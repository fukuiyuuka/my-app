■一般的なサイトの攻撃対策

🔴 必ずされている

・SQLインジェクション
	・ユーザー入力をそのままSQLに埋め込み、不正にDBを操作する
	・対策：プレースホルダー（バインドパラメータ）、ORMの使用
	・これは今どき対策してないと危険。フレームワーク側で対処済みが多い

・MITM（中間者攻撃）
	・通信を盗聴し、中身を改ざん
	・対策：HTTPS化（TLS）
	・今やLet's Encryptなど無料SSLの普及で常識に

🔶 大体されている

・XSS（クロスサイトスクリプティング）
	・ユーザー入力に悪意のあるJSを埋め込み、クッキー盗難や画面改ざんなどを行う
	・対策：出力時エスケープ（HTMLエンコード）、WAF、CSP
	・フレームワークが自動で対策してくれることも多い（Vue, Reactなど）

・CSRF（クロスサイトリクエストフォージェリ）
	・ユーザーのCookieを使って、悪意あるサイトが勝手に通信する
	・対策：CSRFトークン、SameSite=Strict または Lax
	・SPA系は対応漏れも見られる。最近はSameSite属性で緩和される

・セッションハイジャック
	・セッションIDを盗み、不正ログインする
	・対策：HttpOnly + Secure Cookie、セッションのタイムアウト
	・セッション認証が多いので、これは比較的意識されている

・パスワード総当たり（ブルートフォース）
	・ログインフォームに総当たりでログインを試みる
	・対策：ロック機能、CAPTCHA、レートリミット
	・セキュリティ意識高めのサイトは対応してる。CAPTCHAは中小でも導入されがち

🟡 たまにされている

・クリックジャッキング	
	・ページをiframeで覆い、ユーザーが意図しないクリックを誘導	
	・対策：X-Frame-Options: DENY ヘッダ		
	・地味だけど重要。ヘッダ設定で済むが、抜けてるサイトも多い

・情報漏洩（エラーメッセージなど）
	・エラーメッセージにパスやDB名などが含まれてしまう
	・対策：エラーハンドリング、スタックトレース非表示
	・テスト環境をそのまま本番に出すと危険。意外とある

・ディレクトリトラバーサル
	・ファイルの相対パスを悪用し、任意ファイルにアクセス
	・対策：パスチェック、ファイル公開範囲の制限
	・ファイルアップロード機能のあるサイトで注意が必要

・ファイルアップロードの検証不足
	・悪意のあるファイル（.phpなど）をアップし、実行される
	・対策：MIMEタイプ検証、拡張子制限、保存場所の工夫
	・管理画面や問い合わせで使っていると危険
	


